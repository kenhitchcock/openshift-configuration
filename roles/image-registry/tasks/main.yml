- name: Create Primary Storage Class
  k8s:
    state: present
    kind: StorageClass
    api_version: storage.k8s.io/v1
    name: "{{ image_registry_storageClass_name }}"
    merge_type: 
      - strategic-merge
      - merge     
    definition:
      provisioner: "{{ image_registry_def_provisioner }}"
      reclaimPolicy: "{{ image_registry_def_reclaimPolicy }}"
      volumeBindingMode: "{{ image_registry_def_volumeBindingMode }}"
  when: cluster_storage == "dynamic"

# As this StorageClass is maintained by an Operator we cannot remove it, 
# we can however switch the storageclass.kubernetes.io/is-default-class key to false.
# This ensures that the previously created nfs StorageClass will have precedence when creating new PVCs.
- name: Switch thin storage class to non-default
  k8s:
    state: present
    kind: StorageClass
    api_version: storage.k8s.io/v1
    merge_type:
      - strategic-merge
      - merge
    name: thin
    definition:
      metadata:
        annotations:
          storageclass.kubernetes.io/is-default-class: 'false'
  when: cluster_storage == "dynamic"

- name: Create PV with Dynamic Storage
  k8s:
    api_version: v1
    kind: PersistentVolume
    namespace: "{{ image_registry_namespace }}"
    name: "{{ image_registry_pv }}"
    definition:
      spec:
        accessModes:
          - ReadWriteMany
        capacity:
            storage: "{{ image_registry_pv_storage_size }}"
        nfs:
          path: "{{ image_registry_nfs_path }}"
          server: "{{ image_registry_nfs_server }}"
        persistentVolumeReclaimPolicy: Retain
        storageClassName: "{{ image_registry_storageClass_name }}"
  when: cluster_storage == "dynamic"

- name: Create PV w/o Dynamic Storage
  k8s:
    api_version: v1
    kind: PersistentVolume
    namespace: "{{ image_registry_namespace }}"
    name: "{{ image_registry_pv }}"
    definition:
      spec:
        accessModes:
          - ReadWriteMany
        capacity:
            storage: "{{ image_registry_pv_storage_size }}"
        nfs:
          path: "{{ image_registry_nfs_path }}"
          server: "{{ image_registry_nfs_server }}"
        persistentVolumeReclaimPolicy: Retain
        volumeMode: Filesystem
  when: cluster_storage == "manual"

- name: Create PVC with Dynamic Storage
  k8s:
    api_version: v1
    kind: "PersistentVolumeClaim"
    namespace: "{{ image_registry_namespace }}"
    name: "{{ image_registry_pvc }}"
    definition:
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: "{{ image_registry_pvc_storage_size }}"
        storageClassName: "{{ image_registry_storageClass_name }}"

- name: Create PVC w/o Dynamic Storage
  k8s:
    api_version: v1
    kind: "PersistentVolumeClaim"
    namespace: "{{ image_registry_namespace }}"
    name: "{{ image_registry_pvc }}"
    definition:
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: "{{ image_registry_pvc_storage_size }}"


- name: Patch spec fields inc defaultRoute and managedState
  k8s:
    state: present
    namespace: "{{ image_registry_namespace }}"
    api_version: v1
    kind: Config
    name: "{{ image_registry_file }}"
    definition:
      # Need to confirm that this spec updates the existing spec in the config file
      spec:
        defaultRoute: "{{ image_registry_config_defaultRoute }}"
        #httpSecret: "{{ image_registry_config_httpSecret }}"
        logging: "{{ image_registry_config_logging }}"
        managementState: "{{ image_registry_config_managementState }}"
        nodeSelector:
          node-role.kubernetes.io/infra: ""
        proxy: {}
        replicas: "{{ image_registry_config_replicas }}"
        requests:
          read:
            maxWaitInQueue: 0s
          write:
            maxWaitInQueue: 0s
        rolloutStrategy: "{{ image_registry_config_rolloutStrategy }}"
        storage:
        # Can be set to storage: "emptyDir":{}
        # All images will be lost if you restart the registry.
          pvc:
            claim: "{{ image_registry_pvc }}"

#- name: Create image-registry-private-configuration-user secret
#  k8s:
#    state: present
#    api_version: v1
#    kind: Secret
#    namespace: "{{ image_registry_namespace }}-config"
#    name: image-registry-private-configuration-user
#    merge_type: 
#      - strategic-merge
#      - merge     
#    definition:
#      type: Opaque
#      data:
#        image-registry-private-configuration-user: "{{ lookup('file', role_path + '/files/imgregkey') | b64encode }}"  