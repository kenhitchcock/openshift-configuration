---
# This playbook setups up the machineset yaml file.
# Only one section will run.
# update group_vars/all (global variable) for AWS or AZURE.

#---------- AZURE Section below ---------------------#

- name: Render AZURE infra machineset
  template:
    src: templates/azure-infra.yaml.j2
    dest: "{{ role_path }}/files/{{ item.name }}-{{ region }}-{{ item.az }}.yaml"
  with_items: "{{azure_machinesets}}"
  when: cloud == "Azure"

- name: Create AZURE infra machineset
  k8s:
    state: present
    src: "{{ role_path }}/files/{{ item.name }}-{{ region}}-{{ item.az }}.yaml"
    merge_type: 
      - strategic-merge
      - merge     
  with_items: "{{azure_machinesets}}"
  when: cloud == "Azure"

#---------- AWS Section below ---------------------#

- name: Render AWS infra machineset
  template:
    src: templates/aws-infra.yaml.j2
    dest: "{{ role_path }}/files/{{ item.name }}-{{ region }}{{ item.az }}.yaml"  
  with_items: "{{aws_machinesets}}"
  when: cloud == "AWS"

- name: Create AWS infra machineset
  k8s:
    state: present
    src: "{{ role_path }}/files/{{ item.name }}-{{ region }}{{ item.az }}.yaml"
    merge_type: 
      - strategic-merge
      - merge     
  with_items: "{{aws_machinesets}}"
  when: cloud == "AWS"


#---------- Wait for infra nodes to be ready ---------------------#

- name: Count the number of infra machines
  shell: KUBECONFIG='{{ kube_config }}' oc get machines -l machine.openshift.io/cluster-api-machine-role=infra -n openshift-machine-api | grep -v NAME | wc -l | xargs echo -n
  register: result

- name: Wait for infra nodes to become ready
  shell: KUBECONFIG={{ kube_config }} oc get nodes -l node-role.kubernetes.io/infra | egrep "\sReady" | wc -l | xargs echo -n
  register: count
  until: count.stdout.find("{{ item }}") != -1
  retries: 300
  delay: 10
  with_items: '{{ result.stdout }}'

#---------- MCP creation -------------------------#

- name: Create Machine Config Pool for INFRA nodes
  k8s:
    api_version: machineconfiguration.openshift.io/v1
    state: present
    kind: MachineConfigPool
    merge_type: 
      - strategic-merge
      - merge     
    definition:
      metadata:
        name: infra
      spec:
        machineConfigSelector:
          matchExpressions:
            - {key: machineconfiguration.openshift.io/role, operator: In, values: [worker,infra]}
        nodeSelector:
          matchLabels:
            node-role.kubernetes.io/infra: ""

- name: Wait for infra nodes to become ready
  shell: KUBECONFIG={{ kube_config }} oc get mcp infra -o=jsonpath='{.status.readyMachineCount}{"\n"}'
  register: count
  until: count.stdout.find("{{ item }}") != -1
  retries: 300
  delay: 10
  with_items: '{{ result.stdout }}'
